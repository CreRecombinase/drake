% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drake_plan_helpers.R
\name{return_fst}
\alias{return_fst}
\alias{return_keras}
\alias{return_rds}
\title{Efficient big data storage}
\usage{
return_fst(x)

return_keras(x)

return_rds(x)
}
\arguments{
\item{x}{A large target to save in a specialized (big-data-friendly)
format.}
}
\description{
Customize the format in which \code{drake} stores a target.
More efficient for big data than \code{drake}'s default storage.
}
\details{
The optional \code{return_*()} functions go at the end of your
\code{\link[=drake_plan]{drake_plan()}} commands and imported functions.
Each \code{return_*()} function tells \code{drake}
to bypass \code{storr} and save your target to a specialized format.
This approach almost always reduces memory consumption,
and it can dramatically boost speed and reduce storage space too.
No matter what storage format you choose for a target,
the correct value is returned from \code{\link[=loadd]{loadd()}}, \code{\link[=readd]{readd()}},
and \code{drake_cache()$get()}. (But if you load the cache with
\code{cache <- storr_rds(".drake/")}, then \code{cache$get()} will
only return a reference to the target, not the actual target itself.)
}
\section{Return functions}{

\itemize{
\item \code{return_fst()}: Save the target with \code{write_fst()}.
Requires the \code{fst} package. The target must be a data frame.
\item \code{return_rds()}: Save the target with \code{saveRDS()}. This is just like
what \code{drake} does by default except that we avoid making a serialized
copy of the data in memory.
\item \code{return_keras()}: Save the target with \code{save_model_hdf5()}.
Requires the \code{keras} package. The target must be a Keras model.
}
}

\examples{
\dontrun{
isolate_example("quarantine side effects", {
if (requireNamespace("fst")) {
create_large_data <- function() {
  data.frame(x = runif(1e8)) # 800 MB
}
plan <- drake_plan(x = return_fst(create_large_data()))
system.time(make(plan)) # Should be fast for 800 MB
system.time(loadd(x)) # Should be fast for 800 MB
head(x)
}
})
}
}
\seealso{
\code{\link[=make]{make()}}
}
