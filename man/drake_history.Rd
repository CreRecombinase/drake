% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-history.R
\name{drake_history}
\alias{drake_history}
\title{History and provenance}
\usage{
drake_history(cache = NULL, history = NULL, analyze = FALSE,
  make_imports = TRUE, do_prework = TRUE, verbose = TRUE)
}
\arguments{
\item{cache}{An optional
\code{drake}/\href{https://github.com/richfitz/storr}{storr} cache.
If not supplied, \code{drake} will try to find the default cache:
a folder called \code{.drake/} in the current working directory
or one of its ancestor directories.}

\item{history}{An optional \href{https://github.com/wlandau/txtq}{txtq}
produced by \code{make(history = TRUE)}. If not supplied,
\code{drake} will try to find it next to the cache in a folder
called \code{.drake_history/}.}

\item{analyze}{Logical, whether to analyze \code{\link[=drake_plan]{drake_plan()}}
commands for arguments to function calls.
Could be slow because this requires parsing and analyzing
lots of R code.}

\item{make_imports}{Logical, whether to make the imports first.
Set to \code{FALSE} to save some time and risk obsolete output.}

\item{do_prework}{Whether to do the \code{prework}
normally supplied to \code{\link[=make]{make()}}.}

\item{verbose}{Integer, control printing to the console/terminal.
\itemize{
\item \code{0}: print nothing.
\item \code{1}: print targets, retries, and failures.
\item \code{2}: also show a spinner when preprocessing tasks are underway.
}}
}
\value{
A data frame of target history.
}
\description{
See the history and provenance of your targets:
what you ran, when you ran it, the function arguments
you used, and how to get old data back.
}
\details{
If \code{analyze} is \code{TRUE}, \code{drake}
scans your \code{\link[=drake_plan]{drake_plan()}} commands
for function arguments and mentions them in the history.
A function argument shows up if and only if
1. It is explicitly named in the function call,
e.g. \code{list(a = 1)} instead of \code{list(1)}.
3. It has length 1.
4. It is atomic, i.e. a base type: logical, integer,
real, complex, character, or raw.
}
\examples{
\dontrun{
isolate_example({
# First, let's iterate on a drake workflow.
load_mtcars_example()
make(my_plan, history = TRUE, verbose = 0L)
# Naturally, we'll make updates to our targets along the way.
reg2 <- function(d) {
  d$x2 <- d$x ^ 3
  lm(y ~ x2, data = d)
}
Sys.sleep(0.01)
make(my_plan, history = TRUE, verbose = 0L)
# The history is a data frame about all the recorded runs of your targets.
out <- drake_history(analyze = TRUE)
print(out)
# Let's use the history to recover the oldest version
# of our regression2_small target.
oldest_reg2_small <- max(which(out$target == "regression2_small"))
hash_oldest_reg2_small <- out[oldest_reg2_small, ]$hash
cache <- drake_cache()
cache$get_value(hash_oldest_reg2_small)
# If you run clean(), drake can still find all the targets.
clean(small)
drake_history()
# But if you run clean() with garbage collection,
# older versions of your targets may be gone.
clean(large, garbage_collection = TRUE)
drake_history()
})
}
}
