% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-plan.R
\name{no_deps}
\alias{no_deps}
\title{Suppress dependency detection.}
\usage{
no_deps(x = NULL)
}
\arguments{
\item{x}{Code for which dependency detection is suppressed.}
}
\value{
The argument.
}
\description{
Tell \code{drake} to not search for dependencies in a chunk of code.
}
\details{
\code{no_deps()} is similar to \code{\link[=ignore]{ignore()}}, but it still lets \code{drake}
track meaningful changes to the code itself.
}
\examples{
\dontrun{
isolate_example("Contain side effects", {
# Normally, `drake` reacts to changes in dependencies.
x <- 4
make(plan = drake_plan(y = sqrt(x)))
x <- 5
make(plan = drake_plan(y = sqrt(x)))
make(plan = drake_plan(y = sqrt(4) + x))
# But not with no_deps().
make(plan = drake_plan(y = sqrt(4) + no_deps(x))) # Builds y.
x <- 6
make(plan = drake_plan(y = sqrt(4) + no_deps(x))) # Skips y.
# However, `drake` *does* react to changes
# to the *literal code* inside `no_deps()`.
make(plan = drake_plan(y = sqrt(4) + ignore(x + 1))) # Builds y.

# Like ignore(), no_deps() works with functions and multiline code chunks.
z <- 1
f <- function(x) {
  no_deps({
    x <- y + 1
    x <- x + 2
  })
  x
}
make(plan = drake_plan(z = f(2)))
readd(x)
z <- 2 # Changed dependency is not tracked.
make(plan = drake_plan(z = f(2)))
readd(x)
})
}
}
\seealso{
\code{\link[=file_in]{file_in()}}, \code{\link[=file_out]{file_out()}}, \code{\link[=knitr_in]{knitr_in()}}, \code{\link[=no_deps]{no_deps()}}
}
